{
  "enabled": true,
  "name": "Go Code Quality Analyzer",
  "description": "Monitors Go source code files for changes and provides automated code quality analysis including code smells, design patterns, SOLID principles, clean code practices, domain-driven design, rich domain models, and Go-specific standards and best practices.",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "**/*.go"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "Analyze the modified Go code for potential improvements focusing on:\n\n1. **Code Smells**: Identify long methods, large classes, duplicate code, dead code, and other anti-patterns\n2. **Design Patterns**: Suggest appropriate design patterns (Repository, Factory, Strategy, Observer, etc.)\n3. **SOLID Principles**: Check adherence to Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, and Dependency Inversion\n4. **Clean Code**: Evaluate naming conventions, function size, complexity, and readability\n5. **Domain-Driven Design**: Assess domain model richness, bounded contexts, and business logic encapsulation\n6. **Rich Domain Model**: Identify opportunities for behavior-rich entities vs anemic domain models\n7. **Go Standards**: Check for Go idioms, error handling patterns, interface usage, and package organization\n8. **Best Practices**: Evaluate concurrency patterns, memory management, testing practices, and performance considerations\n\nFor each issue found, provide:\n- Clear description of the problem\n- Specific location in the code\n- Concrete improvement suggestion\n- Code example if applicable\n- Impact on maintainability/performance\n\nFocus on actionable recommendations that maintain existing functionality while improving code quality."
  }
}