name: Container

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and push container images
  container:
    name: Build and Push Container
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          # set latest tag for default branch
          type=raw,value=latest,enable={{is_default_branch}}
          # set develop tag for develop branch  
          type=raw,value=develop,enable=${{ github.ref == 'refs/heads/develop' }}
          # tag event
          type=ref,event=tag
          # branch event (except main and develop)
          type=ref,event=branch,enable=${{ !contains(fromJSON('["refs/heads/main", "refs/heads/develop"]'), github.ref) }}
          # pr event
          type=ref,event=pr
          # set edge tag for main branch commits
          type=raw,value=edge,enable=${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}

    - name: Determine version information
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "v0.1.0")
        fi
        
        GIT_REV=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
        BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "git_rev=${GIT_REV}" >> $GITHUB_OUTPUT
        echo "build_date=${BUILD_DATE}" >> $GITHUB_OUTPUT
        
        echo "Version: ${VERSION}"
        echo "Git Rev: ${GIT_REV}"
        echo "Build Date: ${BUILD_DATE}"

    - name: Build and push container image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ steps.version.outputs.version }}
          GIT_REV=${{ steps.version.outputs.git_rev }}
          BUILD_DATE=${{ steps.version.outputs.build_date }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate SBOM
      if: github.event_name != 'pull_request'
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Upload SBOM
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: sbom-${{ github.run_number }}
        path: sbom.spdx.json
        retention-days: 30

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: container
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=develop,enable=${{ github.ref == 'refs/heads/develop' }}
          type=ref,event=tag
          type=ref,event=branch,enable=${{ !contains(fromJSON('["refs/heads/main", "refs/heads/develop"]'), github.ref) }}
          type=raw,value=edge,enable=${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Grype vulnerability scanner
      uses: anchore/scan-action@v6
      id: grype-scan
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        severity-cutoff: high
        output-format: sarif

    - name: Upload Grype scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: ${{ steps.grype-scan.outputs.sarif }}

  # Test container
  container-test:
    name: Test Container
    runs-on: ubuntu-latest
    needs: container
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=develop,enable=${{ github.ref == 'refs/heads/develop' }}
          type=ref,event=tag
          type=ref,event=branch,enable=${{ !contains(fromJSON('["refs/heads/main", "refs/heads/develop"]'), github.ref) }}
          type=raw,value=edge,enable=${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}

    - name: Test container startup
      run: |
        # Test that the container starts and responds to version flag
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest --version

    - name: Test container structure
      run: |
        # Test that the container has the expected structure
        docker run --rm --entrypoint="" ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest ls -la /

    - name: Inspect container
      run: |
        # Get container information
        docker image inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  # Cleanup old images (only on main branch)
  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [container, security-scan, container-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Delete old images
      uses: snok/container-retention-policy@v2
      with:
        image-names: ${{ env.IMAGE_NAME }}
        cut-off: 30 days ago UTC
        account-type: personal
        org-name: ${{ github.repository_owner }}
        keep-at-least: 5
        skip-tags: latest,develop
        token: ${{ secrets.GITHUB_TOKEN }}